


global DrawBox = function(pos, size)
{
	DebugDraw.Begin(PrimitiveType.Quads);
	DebugDraw.AddVertex(Vector3(pos.x - size.x*0.5, pos.y - size.y*0.5));
	DebugDraw.AddVertex(Vector3(pos.x - size.x*0.5, pos.y + size.y*0.5));
	DebugDraw.AddVertex(Vector3(pos.x + size.x*0.5, pos.y + size.y*0.5));
	DebugDraw.AddVertex(Vector3(pos.x + size.x*0.5, pos.y - size.y*0.5));
	DebugDraw.End();
};

global Saturate = function(v)
{
	if (v > 1)
	{
		return 1;
	}
	if (v < 0)
	{
		return 0;
	}
	return v;
};

global Lerp = function(minV, maxV, t)
{
	return minV + (maxV-minV)*t;
};



GameTable = function(_width, _height)
{
	obj = table();
	
	obj.width = _width;
	obj.height = _height;
	obj.cells = array();
	
	for (y = 0; y < height; y += 1)
	{
		for (x = 0; x < width; x += 1)
		{	
		}
	}
	
	obj.Draw = function()
	{
		DebugDraw.Begin(PrimitiveType.Lines);
		DebugDraw.SetColor(Vector3(0.85, 0.85, 0.85), 1.0);
		for (y = 0; y <= .height; y += 1)
		{
			DebugDraw.AddVertex(Vector3(0, y));
			DebugDraw.AddVertex(Vector3(.width, y));
		}
		for (x = 0; x <= .width; x += 1)
		{
			DebugDraw.AddVertex(Vector3(x, 0));
			DebugDraw.AddVertex(Vector3(x, .height));
		}
		DebugDraw.End();
	};
	
	return obj;
};



Snake = function(_startingPos, _stepTime, _moveDir, _size)
{
	obj = table();
	
	obj.moveDir = _moveDir;
	obj.prevPositions = array(_size);
	obj.curPositions = array(_size);
	for (i = 0; i < _size; i += 1)
	{
		obj.prevPositions[i] = _startingPos;
		obj.curPositions[i] = _startingPos;
	}
	obj.curPositions[i] = _startingPos + _moveDir;
	obj.stepTime = _stepTime;
	obj.timeFraction = 0;
	
	obj.StepTick = function()
	{
		while (true)
		{
			sleep(.stepTime);
			prevHeadPos = .curPositions[0];
			nextHeadPos = .curPositions[0] + .moveDir;
			.prevPositions.Shift(1);
			.curPositions.Shift(1);
			.prevPositions[0] = prevHeadPos;
			.curPositions[0] = nextHeadPos;
			.timeFraction = 0;
		}
	};
	
	obj.Input = function()
	{
		if (Input.GetState(InputKeys.Up))
		{
			.moveDir = Vector3(0, 1);
		}
		if (Input.GetState(InputKeys.Down))
		{
			.moveDir = Vector3(0, -1);
		}
		if (Input.GetState(InputKeys.Left))
		{
			.moveDir = Vector3(-1, 0);
		}
		if (Input.GetState(InputKeys.Right))
		{
			.moveDir = Vector3(1, 0);
		}
	};
	
	obj.FrameTick = function()
	{
		while (true)
		{
			.timeFraction += Game.FrameTime() / .stepTime;
			.Input();
			yield();
		}
	};
	
	function obj.Draw()
	{
		halfCell = Vector3(0.5,0.5);
		boxSize = Vector3(1, 1);
		lastIdx = .curPositions.Size()-1;
		
		DebugDraw.SetColor(Vector3(0.25, 0.5, 0.75), 1.0);
		nextPos = .curPositions[0] + .moveDir;
		lerpedPos = Lerp(.curPositions[0], nextPos, .timeFraction);
		DrawBox(lerpedPos + halfCell, boxSize);
	
		DebugDraw.SetColor(Vector3(0.5, 0.75, 1.0), 1.0);
		for (i = 1; i <= lastIdx; i += 1)
		{
			DrawBox(.curPositions[i] + halfCell, boxSize);
		}
		lerpedPos = Lerp(.prevPositions[0], .curPositions[0], .timeFraction);
		DrawBox(lerpedPos + halfCell, boxSize);
		lerpedPos = Lerp(.prevPositions[lastIdx], .curPositions[lastIdx], .timeFraction);
		DrawBox(lerpedPos + halfCell, boxSize);
	};
	
	obj:thread(obj.StepTick);
	obj:thread(obj.FrameTick);
	
	return obj;
};


Game.gameTable = GameTable(48, 32);
Game.player = Snake(Vector3(2, 2), 1.0/14.0, Vector3(1, 0), 40);

while (true)
{
	/*
	DebugDraw.SetOrtho2D(
		Vector3(Game.gameTable.width*0.5, Game.gameTable.height*0.5),
		Game.gameTable.width * 1.2);
		*/
		
	dir = Vector3(0, -1, 3).Normalize();
	target = Vector3(Game.gameTable.width*0.5, Game.gameTable.height*0.5, 0.0);
	position = target + dir * Game.gameTable.width * 0.85;
	DebugDraw.SetPerspective(1.4, 1.0, 1000.0);
	DebugDraw.SetCamera(
		position,
		target,
		Vector3(0, 0, 1));
		
	Game.gameTable.Draw();
	Game.player.Draw();
	yield();
}
